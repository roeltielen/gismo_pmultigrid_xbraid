#!/bin/bash
# hooks/build
# https://docs.docker.com/docker-cloud/builds/advanced/

## $IMAGE_NAME var is injected into the build so the tag is correct.
echo "[***] Build hook starting..."

# $(echo "index.docker.io/user/respository" | cut -d '/' -f 3) = "repository"
APPLICATION=$(echo "${DOCKER_REPO}" | cut -d '/' -f 3)

echo "[---] DOCKERFILE_PATH:        ${DOCKERFILE_PATH}"
echo "[---] DOCKER_REPO:            ${DOCKER_REPO}"
echo "[---] IMAGE_NAME:             ${IMAGE_NAME}"
echo "[---] APPLICATION:            ${APPLICATION}"

# $(echo "index.docker.io/user/respository" | cut -d '/' -f 2-3) = "user/repository"
GITHUB_USERREPO=$(echo "${DOCKER_REPO}" | cut -d '/' -f 2-3)

# Set description from github
DESCRIPTION=$(curl -s https://api.github.com/repos/${GITHUB_USERREPO} \
    | grep '"description".*' \
    | head -n 1 \
    | cut -d '"' -f 4)

echo "[---] GITHUB_USERREPO:        ${GITHUB_USERREPO}"
echo "[---] DESCRIPTION:            ${DESCRIPTION}"

# Compiler setting
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)clang3.5?(\-*))
        CC=clang-3.5
        CXX=clang++-3.5
        ;;
    *?(\-)clang3.6?(\-*))
        CC=clang-3.6
        CXX=clang++-3.6
        ;;
    *?(\-)clang3.7?(\-*))
        CC=clang-3.7
        CXX=clang++-3.7
        ;;
    *?(\-)clang3.8?(\-*))
        CC=clang-3.8
        CXX=clang++-3.8
        ;;
    *?(\-)clang3.9?(\-*))
        CC=clang-3.9
        CXX=clang++-3.9
        ;;
    *?(\-)clang4.0?(\-*))
        CC=clang-4.0
        CXX=clang++-4.0
        ;;
    *?(\-)clang5.0?(\-*))
        CC=clang-5.0
        CXX=clang++-5.0
        ;;
    *?(\-)clang6.0?(\-*))
        CC=clang-6.0
        CXX=clang++-6.0
        ;;
    *?(\-)clang7?(\-*))
        CC=clang-7
        CXX=clang++-7
        ;;
    *?(\-)clang8?(\-*))
        CC=clang-8
        CXX=clang++-8
        ;;
    # *?(\-)clang9?(\-*))
    #     CC=clang-9
    #     CXX=clang++-9
    #     ;;
    # *?(\-)clang10?(\-*))
    #     CC=clang-10
    #     CXX=clang++-10
    #     ;;
    *?(\-)gcc4.7?(\-*))
        CC=gcc-4.7
        CXX=g++-4.7
        FC=gfortran-4.7
        ;;
    *?(\-)gcc4.8?(\-*))
        CC=gcc-4.8
        CXX=g++-4.8
        FC=gfortran-4.8
        ;;
    *?(\-)gcc4.9?(\-*))
        CC=gcc-4.9
        CXX=g++-4.9
        FC=gfortran-4.9
        ;;
    *?(\-)gcc5?(\-*))
        CC=gcc-5
        CXX=g++-5
        FC=gfortran-5
        ;;
    # *?(\-)gcc6?(\-*))
    #     CC=gcc-6
    #     CXX=g++-6
    #     FC=gfortran-6
    #     ;;    
    # *?(\-)gcc7?(\-*))
    #     CC=gcc-7
    #     CXX=g++-7
    #     FC=gfortran-7
    #     ;;
    # *?(\-)gcc8?(\-*))
    #     CC=gcc-8
    #     CXX=g++-8
    #     FC=gfortran-8
    #     ;;
    # *?(\-)gcc9?(\-*))
    #     CC=gcc-9
    #     CXX=g++-9
    #     FC=gfortran-9
    #     ;;
    # *?(\-)gcc10?(\-*))
    #     CC=gcc-10
    #     CXX=g++-10
    #     FC=gfortran-10
    #     ;;
    *)
        echo "[***] Unsupported compiler"
        exit 1
        ;;
esac
shopt -u extglob;

echo "[---] CC:                     ${CC}"
echo "[---] CXX:                    ${CXX}"
echo "[---] FC:                     ${FC}"

# C++ standard
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)cxx11?(\-*))
        CMAKE_CXX_STANDARD=11
        ;;
    *?(\-)cxx14?(\-*))
        CMAKE_CXX_STANDARD=14
        ;;
    *?(\-)cxx17?(\-*))
        CMAKE_CXX_STANDARD=17
        ;;
    *?(\-)cxx20?(\-*))
        CMAKE_CXX_STANDARD=20
        ;;
    *?(\-)cxx98?(\-*))
        CMAKE_CXX_STANDARD=98
        ;;
    *)
        echo "[***] Unsupported C++ standard"
        exit 1
        ;;
esac
shopt -u extglob;

echo "[---] CMAKE_CXX_STANDARD:     ${CMAKE_CXX_STANDARD}"

# Build type
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)release?(\-*))
        CMAKE_BUILD_TYPE=Release
        ;;
    *?(\-)debug?(\-*))
        CMAKE_BUILD_TYPE=Debug
        ;;
    *?(\-)debinfo?(\-*))
        CMAKE_BUILD_TYPE=RelWithDebInfo
        ;;
    *?(\-)minsize?(\-*))
        CMAKE_BUILD_TYPE=MinSizeRel
        ;;
    *)
        echo "[***] Unsupported build type"
        exit
        ;;
esac
shopt -u extglob;

echo "[---] CMAKE_BUILD_TYPE:       ${CMAKE_BUILD_TYPE}"

# Target architecture
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)auto?(\-*))
        TARGET_ARCHITECTURE="auto"
        ;;
    *?(\-)none?(\-*))
        TARGET_ARCHITECTURE="none"
        ;;
    *?(\-)generic?(\-*))
        TARGET_ARCHITECTURE="generic"
        ;;
    *?(\-)core?(\-*))
        TARGET_ARCHITECTURE="core"
        ;;
    *?(\-)merom?(\-*))
        TARGET_ARCHITECTURE="merom"
        ;;
    *?(\-)penryn?(\-*))
        TARGET_ARCHITECTURE="penryn"
        ;;
    *?(\-)nehalem?(\-*))
        TARGET_ARCHITECTURE="nehalem"
        ;;
    *?(\-)westmere?(\-*))
        TARGET_ARCHITECTURE="westmere"
        ;;
    *?(\-)sandybridge?(\-*))
        TARGET_ARCHITECTURE="sandybridge"
        ;;
    *?(\-)ivybridge?(\-*))
        TARGET_ARCHITECTURE="ivybridge"
        ;;
    *?(\-)haswell?(\-*))
        TARGET_ARCHITECTURE="haswell"
        ;;
    *?(\-)broadwell?(\-*))
        TARGET_ARCHITECTURE="broadwell"
        ;;
    *?(\-)skylake?(\-*))
        TARGET_ARCHITECTURE="skylake"
        ;;
    *?(\-)skylake-xeon?(\-*))
        TARGET_ARCHITECTURE="skylake-xeon"
        ;;
    *?(\-)kabylake?(\-*))
        TARGET_ARCHITECTURE="kabylake"
        ;;
    *?(\-)cannonlake?(\-*))
        TARGET_ARCHITECTURE="cannonlake"
        ;;
    *?(\-)cascadelake?(\-*))
        TARGET_ARCHITECTURE="cascadelake"
        ;;
    *?(\-)cooperlake?(\-*))
        TARGET_ARCHITECTURE="cooperlake"
        ;;
    *?(\-)icelake?(\-*))
        TARGET_ARCHITECTURE="icelake"
        ;;
    *?(\-)icelake-xeon?(\-*))
        TARGET_ARCHITECTURE="icelake-xeon"
        ;;
    *?(\-)tigerlake?(\-*))
        TARGET_ARCHITECTURE="tigerlake"
        ;;
    *?(\-)alderlake?(\-*))
        TARGET_ARCHITECTURE="alderlake"
        ;;
    *?(\-)sapphirerapids?(\-*))
        TARGET_ARCHITECTURE="sapphirerapids"
        ;;
    *?(\-)bonnell?(\-*))
        TARGET_ARCHITECTURE="bonnell"
        ;;
    *?(\-)silvermont?(\-*))
        TARGET_ARCHITECTURE="silvermont"
        ;;
    *?(\-)goldmont?(\-*))
        TARGET_ARCHITECTURE="goldmont"
        ;;
    *?(\-)goldmont-plus?(\-*))
        TARGET_ARCHITECTURE="goldmont-plus"
        ;;
    *?(\-)tremont?(\-*))
        TARGET_ARCHITECTURE="tremont"
        ;;
    *?(\-)knl?(\-*))
        TARGET_ARCHITECTURE="knl"
        ;;
    *?(\-)knm?(\-*))
        TARGET_ARCHITECTURE="knm"
        ;;
    *?(\-)atom?(\-*))
        TARGET_ARCHITECTURE="atom"
        ;;
    *?(\-)k8?(\-*))
        TARGET_ARCHITECTURE="k8"
        ;;
    *?(\-)k8-sse3?(\-*))
        TARGET_ARCHITECTURE="k8-sse3"
        ;;
    *?(\-)barcelona?(\-*))
        TARGET_ARCHITECTURE="barcelona"
        ;;
    *?(\-)istanbul?(\-*))
        TARGET_ARCHITECTURE="istanbul"
        ;;
    *?(\-)magny-cours?(\-*))
        TARGET_ARCHITECTURE="magny-cours"
        ;;
    *?(\-)bulldozer?(\-*))
        TARGET_ARCHITECTURE="bulldozer"
        ;;
    *?(\-)interlagos?(\-*))
        TARGET_ARCHITECTURE="interlagos"
        ;;
    *?(\-)piledriver?(\-*))
        TARGET_ARCHITECTURE="piledriver"
        ;;
    *?(\-)steamroller?(\-*))
        TARGET_ARCHITECTURE="steamroller"
        ;;
    *?(\-)excavator?(\-*))
        TARGET_ARCHITECTURE="excavator"
        ;;
    *?(\-)amd14h?(\-*))
        TARGET_ARCHITECTURE="amd14h"
        ;;
    *?(\-)amd16h?(\-*))
        TARGET_ARCHITECTURE="amd16h"
        ;;
    *?(\-)zen3?(\-*))
        TARGET_ARCHITECTURE="zen3"
        ;;
    *?(\-)zen2?(\-*))
        TARGET_ARCHITECTURE="zen2"
        ;;
    *?(\-)zen?(\-*))
        TARGET_ARCHITECTURE="zen"
        ;;
    *)
        TARGET_ARCHITECTURE="generic"
        ;;
esac
shopt -u extglob;

echo "[---] TARGET_ARCHITECTURE:    ${TARGET_ARCHITECTURE}"

# Build with Trilinos support
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)trilinos?(\-*))
        GISMO_WITH_TRILINOS=ON
        GISMO_WITH_MPI=ON
        ;;
    *)
        GISMO_WITH_TRILINOS=OFF
        ;;
esac
shopt -u extglob;

# Build with OpenMP support
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)clang?(\-*)|*?(\-)noomp?(\-*))
        GISMO_WITH_OPENMP=OFF
        ;;
    *?(\-)omp?(\-*))
        GISMO_WITH_OPENMP=ON
        ;;
    *)
        GISMO_WITH_OPENMP=ON
        ;;
esac
shopt -u extglob;

# Build with MPI support
shopt -s extglob;
case "$IMAGE_NAME" in
    *?(\-)nompi?(\-*))
        GISMO_WITH_MPI=OFF
        ;;
    *?(\-)mpi?(\-*))
        GISMO_WITH_MPI=ON
        ;;
    *)
        if [ -z {GISMO_WITH_MPI+x} ]; then
            GISMO_WITH_MPI=OFF
        fi
        ;;
esac
shopt -u extglob;

if [[ "${GISMO_WITH_TRILINOS}" == "ON" && "${GISMO_WITH_MPI}" != "ON" ]]; then
    echo "[***] Compiling G+Smo with Trilinos support enabled requires GISMO_WITH_MPI=ON"
    exit 1
fi

echo "[---] GISMO_WITH_OPENMP:      ${GISMO_WITH_OPENMP}"
echo "[---] GISMO_WITH_MPI:         ${GISMO_WITH_MPI}"
echo "[---] GISMO_WITH_TRILINOS:    ${GISMO_WITH_TRILINOS}"
exit 1
## Build the prime image at the end.
if [ -z "$FC" ]
then
    docker build \
           --file "${DOCKERFILE_PATH}" \
           --build-arg APPLICATION=${APPLICATION} \
           --build-arg BUILD_RFC3339=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
           --build-arg COMMIT=$(git rev-parse --short HEAD) \
           --build-arg DESCRIPTION="${DESCRIPTION}" \
           --build-arg VERSION=$(git describe --tags --always) \
           --build-arg CC=${CC} \
           --build-arg CXX=${CXX} \
           --build-arg FC=${FC} \
           --build-arg CMAKE_BUILD_TYPE=${GISMO_BUILD_TYPE} \
           --build-arg CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} \
           --build-arg GISMO_WITH_MPI=${GISMO_WITH_MPI} \
           --build-arg GISMO_WITH_OPENMP=${GISMO_WITH_OPENMP} \
           --build-arg GISMO_WITH_TRILINOS=${GISMO_WITH_TRILINOS} \
           --build-arg TARGET_ARCHITECTURE=${TARGET_ARCHITECTURE} \
           -t ${IMAGE_NAME} \
           .
else
    docker build \
           --file "${DOCKERFILE_PATH}" \
           --build-arg APPLICATION=${APPLICATION} \
           --build-arg BUILD_RFC3339=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
           --build-arg COMMIT=$(git rev-parse --short HEAD) \
           --build-arg DESCRIPTION="${DESCRIPTION}" \
           --build-arg VERSION=$(git describe --tags --always) \
           --build-arg CC=${CC} \
           --build-arg CXX=${CXX} \
           --build-arg CMAKE_BUILD_TYPE=${GISMO_BUILD_TYPE} \
           --build-arg CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} \
          --build-arg GISMO_WITH_MPI=${GISMO_WITH_MPI} \
           --build-arg GISMO_WITH_OPENMP=${GISMO_WITH_OPENMP} \
           --build-arg TARGET_ARCHITECTURE=${TARGET_ARCHITECTURE} \
           -t ${IMAGE_NAME} \
           .
fi

## Push image
docker push ${IMAGE_NAME}

echo "[***] ...build hook complete."
